
//= require markerwithlabel
//= require jquery

var radar = {

  fix_types: {
    0: 'Not available',
    1: 'Not available',
    2: '2D',
    3: '3D'
  },

  initialize: function() {
    var me = this;

    me.map = new google.maps.Map(document.getElementById("map-canvas"), {
      center: new google.maps.LatLng(45.812709,8.763742),
      zoom: 16,
      mapTypeId: google.maps.MapTypeId.SATELLITE,
    });

    me.circuitLayer = new google.maps.KmlLayer(window.location.origin + '/circuit.kml');
    me.circuitLayer.setMap(me.map);

  //  new google.maps.Marker({
  //    position: new google.maps.LatLng(45.808025,8.772275),
  //    title: 'Camera 1',
  //    map: map
  //  });

    me.iw = new google.maps.InfoWindow({
    });

    me.traffics = {};
    me.stations = {};

    faye.subscribe('/glideradar/processed/**', function(message) {
      me.onMessage(message);
    }, null, function() {
      alert('Error subscribing to faye events!');
    });

    setInterval(function() { me.periodicCleanup(); }, 2000);
    setInterval(function() { me.extrapolate(); }, 75);
  },

  onMessage: function(message) {
    var me = this;

    //console.log("MSG=", message);

    switch(message.type) {
    case 'TRAFFICS_UPDATE':
      me.onTrafficsUpdate(message.payload);
    break;
    }
  },

  onTrafficsUpdate: function(message) {
    var me = this;

    jQuery.each(message.stations, function(sta_id, sta) {
      me.onStationUpdate(sta_id, sta);
    });

    jQuery.each(message.traffics, function(plane_id, tra) {
      me.onTrafficUpdate(plane_id, tra);
    });
  },

  onStationUpdate: function(sta_id, sta_data) {
    var me = this;

    var station = me.stations[sta_id];
    if (!station) {
      station = me.stations[sta_id] = {
        station_id: sta_id,
        data: {},
      };
    }

    station.data = sta_data;
    station.local_last_update = new Date;
    station.online = true;

    me.refreshStation(station);
  },

  findOrCreateTraffic: function(plane_id) {
    var me = this;

    var tra = me.traffics[plane_id];
    if (!tra) {
      tra = { plane_id: plane_id };

      tra.marker = new MarkerWithLabel({
        position: new google.maps.LatLng(0, 0),
        labelContent: plane_id || 'N/A',
        labelClass: 'label',
        map: me.map,
        tra: tra,
      });

      google.maps.event.addListener(tra.marker, 'click', function (e, marker) {
        me.iw.open(me.map, this);
        me.iw.tra = this.tra;
        me.updateTrafficIw(this.tra);
      });

      me.traffics[plane_id] = tra;
    }

    return tra;
  },

  onTrafficNew: function(message) {
    var me = this;

    var tra = me.findOrCreateTraffic(message.plane_id);

    tra.plane_info = message.plane_info;

    me.updateTrafficLabel(tra);
  },

  onTrafficUpdate: function(plane_id, data) {
    var me = this;


    tra = me.findOrCreateTraffic(plane_id);

    if (!tra.plane_info && !tra.loading) {
      tra.loading = true;

      jQuery.ajax('/ygg/acao/planes/' + tra.plane_id, {
        dataType: 'json',
        // FIXME usare tra nella closure non funziona???? Il binding è sempre quello dell'ultima funzione anonima definita
        context: tra,
        cache: true,
        error: function() {
          this.loading = false;
        },
        success: function(data) {
          this.loading = false;
          this.plane_info = data;
          me.updateTrafficLabel(this);
        },
      });
    }

    tra.local_last_update = new Date;

    tra.prev_cog = tra.cog;
    tra.prev_sog = tra.sog;

    jQuery.extend(tra, data);

    tra.show_lat = tra.lat;
    tra.show_lng = tra.lng;
    tra.show_cog = tra.cog;

    me.updateTrafficPosition(tra);

    if (me.iw.tra == tra)
      me.updateTrafficIw(tra);
  },

  periodicCleanup: function() {
    var me = this;

    var now = new Date;

    jQuery.each(me.stations, function(sta_id, sta) {
      if (now - sta.local_last_update > 10000) {
        sta.marker.setMap(null);
      }
    });

    jQuery.each(me.traffics, function(plane_id, tra) {
      if (now - tra.local_last_update > 10000) {
        tra.marker.setMap(null);
      }
    });
  },

  adiff: function(a, b) {
    var d = a - b;
    return d < -180 ? d + 360 : (d > 180 ? d - 360 : d);
  },

  extrapolate: function() {
    var me = this;

    jQuery.each(me.traffics, function(plane_id, tra) {
      if (spd < 10)
        return;

      var del = (new Date - tra.local_last_update) / 1000.0; // DeltaT in seconds
      var spd = tra.sog + (tra.sog - tra.prev_sog) * del;
      var tr = me.adiff(tra.cog, tra.prev_cog); // tra.tr

      if (tr > 20) tr = 20;
      if (tr < -20) tr = -20;

      var cog = tra.cog + tr * del;
      var cograd = (cog / 180) * Math.PI;

      tra.show_lat = tra.lat + (Math.cos(cograd) * spd * del) / 111111;
      tra.show_lng = tra.lng + (Math.sin(cograd) * spd * del) / (111111 * Math.cos((tra.lat / 180) * Math.PI));
      tra.show_cog = cog;

      me.updateTrafficPosition(tra);
    });
  },

  types: {
    0: { name: 'unknown', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    1: { name: 'Aliante', icon: 'M -5,0 5,0 M 0,-1 0,3 M -1,3 1,3 z', color: 'white' },
    2: { name: 'Traino', icon: 'M -3,0 3,0 M 0,-0.5 0,2 M -1,2 1,2 M -0.5,-0.5 0.5,-0.5 z', color: 'orange' },
    3: { name: 'Elicottero', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    4: { name: 'Paracadutista', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    5: { name: 'Aereo Paracadutisti', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    6: { name: 'Deltaplano', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    7: { name: 'Parapendio', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    8: { name: 'Aereo a motore', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    9: { name: 'Jet', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    10: { name: 'Disco volante', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    11: { name: 'Mongolfiera', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    12: { name: 'Dirigibile', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    13: { name: 'UAV', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    14: { name: 'unknown', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    15: { name: 'Oggetto', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
  },

  updateTrafficPosition: function(tra) {
    var me = this;

    tra.marker.setPosition(new google.maps.LatLng(tra.show_lat, tra.show_lng));

    tra.marker.setIcon({
      path: me.getType(tra.type).icon,
      fillColor:  me.getType(tra.type).color,
      strokeColor:  me.getType(tra.type).color,
      strokeWeight: 2,
      scale: 5,
      rotation: tra.show_cog || 0,
      strokeOpacity: Math.max([0, 1 - ((new Date - tra.local_last_update) / 10000)]),
    });
  },

  updateTrafficIw: function(tra) {
    var me = this;

    var txt = '';

    if (tra.plane) {
      txt +=
        '<b>' +
        tra.plane.type_name + ' ' + tra.plane.registration +
        (tra.plane.race_registration ? (' (' + tra.plane.race_registration + ')') : '') +
        '</b><br />';

      txt +=
        'Owner: ' + tra.plane.owner_name + '<br />';
    } else {
      txt += '<b>' + me.getType(tra.type).name + '</b><br />';
    }

    txt +=
      'Height: ' + tra.alt.toFixed(0) + ' m<br />' +
      'Speed: ' + (tra.sog * 3.6).toFixed(0) + ' km/h<br />' +
      'V/S: ' + (tra.cr * 3.6).toFixed(1) + ' m/s<br />';

    me.iw.setContent(txt);
  },

  getType: function(type) {
    var me = this;
    return me.types[type] ? me.types[type] : me.types[0];
  },

  updateTrafficLabel: function(tra) {
    var me = this;

    if (tra.plane_info)
      tra.marker.set('labelContent', tra.plane_info.registration || tra.plane_info.flarm_code);
    else
      tra.marker.set('labelContent', 'N/A');

    tra.marker.label.setStyles();
    tra.marker.label.draw();
  },

  refreshStation: function(station) {
    var me = this;

    var pos = new google.maps.LatLng(station.data.lat, station.data.lng);

    if (!station.marker) {
      station.marker = new google.maps.Marker({
        position: pos,
        title: station.station_id,
        map: me.map,
        icon: {
          url: '<%=asset_path('antenna.png')%>',
          anchor: new google.maps.Point(12, 32),
        },
      });

      google.maps.event.addListener(station.marker, 'click', function (e) {
        me.iw.open(me.map, this);
        me.iw.tra = station;
        me.updateStationIw(station);
      });
    }

    station.marker.setPosition(pos);

    if (me.iw.tra == station)
      me.updateStationIw(station);
  },

  updateStationIw: function(station) {
    var me = this;

    me.iw.setContent(
      'Station: ' + station.station_id + '<br />' +
      'GPS fix type: ' + me.fix_types[station.data.gps_fix_type] + ' (' + station.data.gps_sats + ' sats)<br />' +
      'GPS fix quality: ' + station.data.gps_fix_qual + '<br />' +
      'GPS precision: ' + station.data.gps_pdop + '<br />' +
      'Lat: ' + station.data.lat.toFixed(8) + '°<br />' +
      'Lng: ' + station.data.lng.toFixed(8) + '°<br />' +
      'Altitude: ' + station.data.alt + ' m<br />'
    );
  },
};

var faye = new Faye.Client(app.faye_interface_uri);

google.maps.event.addDomListener(window, 'load', function() {
  radar.initialize();
});
